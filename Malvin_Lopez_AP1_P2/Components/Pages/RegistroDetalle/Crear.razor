@page "/Entradas/Create"

@inject EntradaService EntradaService
@inject ProductoService ProductoService
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<h3>Detalle de Entrada</h3>

<div class="card shadow mb-4">
    <div class="card-header">
        <h5 class="mb-0">Productos Utilizados / Detalles de Entrada</h5>
    </div>
    <div class="card-body">

        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label">Producto</label>
                <select class="form-select" @bind="ProductoIdSeleccionado">
                    <option disabled selected value="0">Seleccione un producto</option> 
                    @foreach (var producto in Productos)
                    {
                        <option value="@producto.ProductoId">@producto.Descripcion</option>
                    }
                </select>
            </div>

            <div class="col-md-3">
                <label class="form-label">Cantidad</label>
                <input type="number" class="form-control" @bind="Cantidad" min="1" />
            </div>

            <div class="col-md-3 d-grid align-items-end">
                <button class="btn btn-primary" @onclick="AgregarDetalle">+ Agregar</button>
            </div>
        </div>

        <div class="table-responsive mb-3">
            <table class="table table-bordered table-striped">
                <thead class="table-light">
                    <tr>
                        <th>#</th>
                        <th>Producto</th>
                        <th>Cantidad</th>
                        <th>Peso Total (g)</th>
                        <th>Acción</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Entrada.EntradaDetalle.Any())
                    {
                        @foreach (var detalle in Entrada.EntradaDetalle)
                        {
                            <tr>
                                <td>@detalle.EntradaDetalleId</td>
                                <td>@detalle.NombreProducto</td>
                                <td>@detalle.Cantidad</td>
                                <td>@detalle.PesoTotal.ToString("N2")</td>
                                <td>
                                    <button class="btn btn-sm btn-danger" @onclick="() => RemoverDetalle(detalle)">Quitar</button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" class="text-center text-muted">No hay productos agregados.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="row justify-content-end mb-4">
            <div class="col-md-4">
                <label class="form-label">Peso Total (g)</label>
                <input class="form-control" readonly value="@Entrada.EntradaDetalle.Sum(d => d.PesoTotal).ToString("N2")" />
            </div>
        </div>

        <div class="d-flex justify-content-end gap-2">
            <button class="btn btn-success" @onclick="Guardar">
                <i class="bi bi-save me-1"></i> Guardar
            </button>
            <button class="btn btn-secondary" @onclick="Volver">
                <i class="bi bi-arrow-left me-1"></i> Volver
            </button>
            <button class="btn btn-info text-white" @onclick="Nuevo">
                <i class="bi bi-plus-circle me-1"></i> Nuevo
            </button>
        </div>
    </div>
</div>

@code {
    private Entrada Entrada = new();
    private List<Producto> Productos = new();
    private int ProductoIdSeleccionado = 0; 
    private int Cantidad = 1;

    protected override async Task OnInitializedAsync()
    {
        Productos = await ProductoService.Listar(p => true);
        Nuevo();
    }

    private void AgregarDetalle()
    {
        var producto = Productos.FirstOrDefault(p => p.ProductoId == ProductoIdSeleccionado);
        if (ProductoIdSeleccionado == 0 || producto == null || Cantidad <= 0)
        {
            ToastService.ShowWarning("Seleccione un producto válido y una cantidad mayor a cero.");
            return;
        }

        Entrada.EntradaDetalle.Add(new EntradaDetalle
        {
            
            ProductoId = producto.ProductoId,
            NombreProducto = producto.Descripcion, 
            Cantidad = Cantidad,
            PesoTotal = producto.PesoUnitario * Cantidad
        });

        Cantidad = 1;
        ProductoIdSeleccionado = 0;
        StateHasChanged();
    }

    private void RemoverDetalle(EntradaDetalle detalle)
    {
        Entrada.EntradaDetalle.Remove(detalle);
        StateHasChanged(); 
    }

    private async Task Guardar()
    {
        if (!Entrada.EntradaDetalle.Any())
        {
            ToastService.ShowWarning("Debe agregar al menos un producto para guardar la entrada.");
            return;
        }

        Entrada.Concepto = $"Entrada del {DateTime.Now:dd/MM/yyyy}"; 

        bool guardado = await EntradaService.Guardar(Entrada);
        if (guardado)
        {
            ToastService.ShowSuccess("Entrada guardada correctamente.");
           
            NavigationManager.NavigateTo("/Entradas/Index"); 
        }
        else
        {
            ToastService.ShowError("Ocurrió un error al guardar la entrada.");
        }
    }

    private void Volver()
    {
        NavigationManager.NavigateTo("/Entradas/Index");
    }

    private void Nuevo()
    {
        Entrada = new Entrada
        {
            Fecha = DateTime.Today,
            EntradaDetalle = new List<EntradaDetalle>() 
        };
        ProductoIdSeleccionado = 0; 
        Cantidad = 1; 
        StateHasChanged(); 
    }
}